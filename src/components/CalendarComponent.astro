---
import { getLangFromUrl, useTranslations } from "../i18n/utils";

const lang = getLangFromUrl(Astro.url) as "en" | "es";
const t = useTranslations(lang);

const monthNames = [
  t("calendar.months.january"),
  t("calendar.months.february"),
  t("calendar.months.march"),
  t("calendar.months.april"),
  t("calendar.months.may"),
  t("calendar.months.june"),
  t("calendar.months.july"),
  t("calendar.months.august"),
  t("calendar.months.september"),
  t("calendar.months.october"),
  t("calendar.months.november"),
  t("calendar.months.december"),
];
const weekdays = [
  t("calendar.weekdays.sunday"),
  t("calendar.weekdays.monday"),
  t("calendar.weekdays.tuesday"),
  t("calendar.weekdays.wednesday"),
  t("calendar.weekdays.thursday"),
  t("calendar.weekdays.friday"),
  t("calendar.weekdays.saturday"),
];
---

<div class="calendar-container">
  <div id="calendar" class="calendar">
    <div class="calendar-header">
      <button id="prev-month" class="nav-button">&lsaquo;</button>
      <h2 id="month-year-display"></h2>
      <button id="next-month" class="nav-button">&rsaquo;</button>
    </div>

    <div class="weekdays" id="weekdays">
      {weekdays.map((day) => <div class="weekday">{day}</div>)}
    </div>

    <div id="calendar-days" class="days"></div>
  </div>
</div>

<script
  is:raw
  define:vars={{
    monthNames,
    weekdays,
  }}
>
  const today = new Date();

  let currentMonth = today.getMonth();
  let currentYear = today.getFullYear();
  let disabledDates = [];

  function isDateDisabled(date) {
    if (
      date < new Date(today.getFullYear(), today.getMonth(), today.getDate())
    ) {
      return true;
    }
    return false;
  }

  function isScheduledDate(date) {
    const day = date.getDate();
    const month = date.getMonth();
    const year = date.getFullYear();

    return disabledDates.some(
      (disabledDate) =>
        disabledDate.day === day &&
        disabledDate.month === month &&
        disabledDate.year === year
    );
  }

  function isCurrentMonth() {
    return (
      currentMonth === today.getMonth() && currentYear === today.getFullYear()
    );
  }

  function updatePrevButton() {
    const prevButton = document.getElementById("prev-month");
    if (prevButton) {
      if (isCurrentMonth()) {
        prevButton.classList.add("disabled");
        prevButton.setAttribute("disabled", "true");
      } else {
        prevButton.classList.remove("disabled");
        prevButton.removeAttribute("disabled");
      }
    }
  }

  function generateCalendar(month, year) {
    const monthYearDisplay = document.getElementById("month-year-display");
    if (monthYearDisplay) {
      monthYearDisplay.textContent = `${monthNames[month]} ${year}`;
    }

    const firstDayOfMonth = new Date(year, month, 1).getDay();

    const lastDayOfMonth = new Date(year, month + 1, 0).getDate();

    const daysContainer = document.getElementById("calendar-days");
    if (!daysContainer) return;

    daysContainer.innerHTML = "";

    for (let i = 0; i < firstDayOfMonth; i++) {
      const emptyDay = document.createElement("div");
      emptyDay.className = "day empty";
      daysContainer.appendChild(emptyDay);
    }

    for (let i = 1; i <= lastDayOfMonth; i++) {
      const date = new Date(year, month, i);
      const dayElement = document.createElement("div");

      const classes = ["day"];

      if (isDateDisabled(date)) {
        classes.push("disabled");
      }

      if (isScheduledDate(date)) {
        classes.push("scheduled");
      }

      if (
        i === today.getDate() &&
        month === today.getMonth() &&
        year === today.getFullYear()
      ) {
        classes.push("today");
      }

      dayElement.className = classes.join(" ");
      dayElement.textContent = i.toString();
      daysContainer.appendChild(dayElement);
    }

    updatePrevButton();
  }

  function nextMonth() {
    currentMonth++;
    if (currentMonth > 11) {
      currentMonth = 0;
      currentYear++;
    }
    generateCalendar(currentMonth, currentYear);
  }

  function prevMonth() {
    if (isCurrentMonth()) return;

    currentMonth--;
    if (currentMonth < 0) {
      currentMonth = 11;
      currentYear--;
    }
    generateCalendar(currentMonth, currentYear);
  }

  // Aquí puedes agregar la función para obtener las fechas deshabilitadas
  async function fetchDisabledDates() {
    try {
      // const response = await fetch('tu-endpoint');
      // const data = await response.json();
      const data = [
        "2025-03-21",
        "2025-03-22",
        "2025-03-23",
        "2025-03-24",
        "2025-04-15",
        "2025-05-26",
        "2025-05-27",
        "2025-05-31",
      ];
      disabledDates = data.map((date) => ({
        day: new Date(date).getDate(),
        month: new Date(date).getMonth(),
        year: new Date(date).getFullYear(),
      }));
      generateCalendar(currentMonth, currentYear);
    } catch (error) {
      console.error("Error fetching disabled dates:", error);
    }
  }

  function initializeCalendar() {
    generateCalendar(currentMonth, currentYear);
    fetchDisabledDates();
    const nextMonthButton = document.getElementById("next-month");
    const prevMonthButton = document.getElementById("prev-month");

    if (nextMonthButton) {
      nextMonthButton.addEventListener("click", nextMonth);
    }

    if (prevMonthButton) {
      prevMonthButton.addEventListener("click", prevMonth);
    }

    updatePrevButton();
  }

  initializeCalendar();

  document.addEventListener("astro:page-load", () => {
    initializeCalendar();
  });
</script>

<style is:global>
  .calendar-container {
    font-family: Arial, sans-serif;
    max-width: 500px;
    margin: 0 auto;
  }

  .calendar {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
  }

  .calendar-header {
    background-color: #f5f5f5;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #e0e0e0;
  }

  .calendar-header h2 {
    margin: 0;
    font-size: 1.2rem;
  }

  .nav-button {
    background-color: #ffffff;
    border: 1px solid #d0d0d0;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.8rem;
    padding: 0;
    font-size: 1.2rem;
  }

  .nav-button:hover:not(.disabled) {
    background-color: #f0f0f0;
  }

  .nav-button.disabled {
    background-color: #f5f5f5;
    border-color: #e0e0e0;
    color: #d0d0d0;
    cursor: not-allowed;
  }

  .weekdays {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    background-color: #f9f9f9;
    border-bottom: 1px solid #e0e0e0;
  }

  .weekday {
    text-align: center;
    padding: 10px;
    font-weight: bold;
    font-size: 0.9rem;
  }

  .days {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
  }

  .day {
    aspect-ratio: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 1px solid transparent;
  }

  .day.empty {
    background-color: #fafafa;
  }

  .day.disabled {
    color: #d0d0d0;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .day.today {
    background-color: #e6f7ff;
    font-weight: bold;
    border: 1px solid #1890ff;
    border-radius: 50%;
  }

  .day.scheduled:not(.today) {
    background-color: #ececec;
    font-weight: bold;
    color: #c7c9ca;
    cursor: not-allowed;
    text-decoration: line-through;
  }

  .day.scheduled.today {
    background-color: #ececec;
    font-weight: bold;
    color: #c7c9ca;
  }
</style>
