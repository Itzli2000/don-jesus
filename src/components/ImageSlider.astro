---
import { Picture } from "astro:assets";
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import gallery1 from "../assets/gallery/gallery1.jpeg";
import gallery2 from "../assets/gallery/gallery2.jpeg";
import gallery3 from "../assets/gallery/gallery3.jpeg";
import gallery4 from "../assets/gallery/gallery4.jpeg";
import gallery5 from "../assets/gallery/gallery5.jpeg";
import gallery6 from "../assets/gallery/gallery6.jpeg";
import gallery7 from "../assets/gallery/gallery7.jpeg";
import gallery8 from "../assets/gallery/gallery8.jpeg";
import gallery9 from "../assets/gallery/gallery9.jpeg";
import gallery10 from "../assets/gallery/gallery10.jpeg";
import gallery11 from "../assets/gallery/gallery11.jpeg";
import gallery12 from "../assets/gallery/gallery12.jpeg";
import gallery13 from "../assets/gallery/gallery13.jpeg";
import gallery14 from "../assets/gallery/gallery14.jpeg";
import gallery15 from "../assets/gallery/gallery15.jpeg";
import gallery16 from "../assets/gallery/gallery16.jpeg";
import gallery17 from "../assets/gallery/gallery17.jpeg";
import gallery18 from "../assets/gallery/gallery18.jpeg";

const images = [
  gallery1,
  gallery2,
  gallery3,
  gallery4,
  gallery5,
  gallery6,
  gallery7,
  gallery8,
  gallery9,
  gallery10,
  gallery11,
  gallery12,
  gallery13,
  gallery14,
  gallery15,
  gallery16,
  gallery17,
  gallery18,
];

const lang = getLangFromUrl(Astro.url) as "en" | "es";
const t = useTranslations(lang);
---

<section class="py-16">
  <div class="container mx-auto px-4">
    <h2 class="text-3xl font-bold text-gray-800 mb-10 text-center">
      {t("home.gallery")}
    </h2>
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {
        images.map((image, index) => (
          <div
            class="bg-gray-200 rounded-lg h-64 flex items-center justify-center overflow-hidden cursor-pointer hover:opacity-90 transition-opacity"
            data-image-index={index}
          >
            <Picture
              transition:name={`image-${index}`}
              src={image}
              alt={`Image ${index + 1}`}
              width={500}
            />
          </div>
        ))
      }
    </div>
  </div>
</section>

<!-- Modal -->
<div
  id="imageModal"
  class="fixed inset-0 bg-black/75 hidden z-50 items-center justify-center"
>
  <div class="relative max-w-4xl w-full mx-4">
    <button
      id="closeModal"
      class="absolute top-4 right-4 text-white text-2xl hover:text-gray-300 z-50"
    >
      Ã—
    </button>
    <div id="modalContent" class="relative flex items-center justify-center">
      <!-- Modal content will be inserted here -->
    </div>
  </div>
</div>

<script>
  const modal = document.getElementById("imageModal");
  const modalContent = document.getElementById("modalContent");
  const closeModal = document.getElementById("closeModal");
  const images = document.querySelectorAll("[data-image-index]");
  const imageArray = Array.from(images);

  if (!modal || !modalContent || !closeModal) {
    throw new Error("Required modal elements not found");
  }

  function openModal(index: number) {
    const image = imageArray[index];
    const pictureElement = image.querySelector("picture");
    if (pictureElement && modalContent && modal) {
      // Clone the picture element to preserve the transition
      const clonedPicture = pictureElement.cloneNode(true) as HTMLElement;
      modalContent.innerHTML = "";
      modalContent.appendChild(clonedPicture);
      modal.classList.remove("hidden");
      modal.classList.add("flex");
      document.body.style.overflow = "hidden";
    }
  }

  function closeModalHandler() {
    if (modal) {
      modal.classList.remove("flex");
      modal.classList.add("hidden");
      document.body.style.overflow = "auto";
    }
  }

  // Add click event listeners
  images.forEach((image, index) => {
    image.addEventListener("click", () => openModal(index));
  });

  closeModal.addEventListener("click", closeModalHandler);

  // Close modal when clicking outside the image
  modal.addEventListener("click", (e) => {
    if (e.target === modal) {
      closeModalHandler();
    }
  });

  // Close modal with Escape key
  document.addEventListener("keydown", (e) => {
    if (e.key === "Escape" && !modal.classList.contains("hidden")) {
      closeModalHandler();
    }
  });
</script>
